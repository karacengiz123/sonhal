{% extends 'layout/base.html.twig' %}
{% block title %}Agent Yönetimi{% endblock %}
{% block customCss %}
    <link href="/assets/dist/css/select2/select2.min.css" rel="stylesheet"/>
{% endblock %}
{% block customScript %}
    <script src="/assets/dist/js/select2/select2.min.js"></script>

    <script src="/assets/softphoneAsset/SIPml-api.js" type="text/javascript"></script>
    <audio id="audio_remote" autoplay="autoplay" audio.controls=true; volume="0.8"></audio>
    <script>
        function getTokenStorage() {
            return window.localStorage.getItem('token')
        }
    </script>
    <script type="text/javascript">
        var agentExten;
        var orderType = "";
        var orderSubType = 0;

        function loadedAMModalStart(modalText = null) {
            $("#loadAgentM").modal({
                backdrop: 'static',
                keyboard: false,
                show: true,
                escapeClose: false,
                clickClose: false,
                showClose: false
            });
            if (modalText == null) {
                $("#loadAgentMText").html("Lütfen Bekleyiniz");
            } else {
                $("#loadAgentMText").html(modalText);
            }

        }

        function loadedAMModalStop() {
            $("#loadAgentM").modal('hide');
            $("#loadAgentMText").html("");
        }

        $(document).ready(function () {

            $.get("{{ path('team_select') }}",
                function (datateam) {
                    var dataTeam = [];
                    for (var i = 0; i < datateam.length; i++) {
                        dataTeam [i] = {id: datateam[i].id, text: datateam[i].name};
                    }
                    $('#agent_group').select2({
                        placeholder: 'Takım Seçiniz..',
                        data: dataTeam
                    });
                },
            );

            $.get("{{ path('acw_select') }}",
                function (dataacw) {
                    var dataAcw = [];
                    var i = 1;
                    $.each(dataacw, function (key, val) {
                        $.each(val, function (keyy, vall) {
                            dataAcw [i] = {id: vall.id, text: vall.name,typeT:key};
                            i++;
                        });
                    });
                    $('#acw_select').select2({
                        placeholder: 'ACW Seçiniz..',
                        data: dataAcw

                    });
                },
            );
        });

        $('#agent_group').on('select2:select', function (e) {
            var id = e.params.data.id;
            var text = e.params.data.text;
            $.get("/ibb-staff/agent-select/" + id,
                function (datax) {
                    console.log(datax);
                    var users = datax.users;
                    for (var i = 0; i < users.length; i++) {
                        users[i] = {id: users[i].id, text: users[i].first_name + " " + users[i].last_name};
                    }

                    clearSelect("agent_select");
                    addSelectData("agent_select",users,"Temsilci Seçiniz");
                },
            );
        });

        function clearSelect(selectId) {
            var id = "#"+selectId;
            $(id).select2();
            $(id).select2("destroy");
            $(id).html("");
            $(id).select2();
        }

        function addSelectData(selectId,data,placeHolder="") {
            var id = "#"+selectId;
            $(id).select2({
                placeholder:placeHolder,
                data:data
            });
        }

        $('#agent_select').on('select2:select', function (e) {
            var id = e.params.data.id;
            var text = e.params.data.text;
            console.log(text);
            statusControl(id);
            setInterval(function () {
                statusControl(id = null);
            },1000);
        });

        function statusControl(id = null) {
            if (id == null) {
                var users = $('#agent_select').select2('data');
                $.each(users, function (key, value) {
                    id = value.id;
                });
            }
            $.ajax({
                method: "POST",
                url: "{{ path('agent_managament_status_control') }}",
                data: "userId=" + id,
                success: function (data) {
                    console.log(data);
                    $('#agentStatus').html("Durumu : " + data.status);
                    $('#agentExtension').html("Dahili : " + data.internal);
                    agentExten = data.internal;
                    if (data.status == "HAZIR") {
                        $('#stopBtn').html("");
                        $('#stopBtn').val("");
                        stopBtn.hidden = true;
                        orderType = "";
                        orderSubType = 0;
                    } else {
                        if (data.status == null){
                            $('#agentStatus').html("Durumu : " + "Çalıyor..");
                            $('#stopBtn').html("");
                            $('#stopBtn').val("");
                            stopBtn.hidden = true;
                            orderType = "";
                            orderSubType = 0;
                        }else {
                            if (data.status == "GİRİŞ YAPMAMIŞ") {
                                $('#stopBtn').html("");
                                $('#stopBtn').val("");
                                stopBtn.hidden = true;
                                orderType = "";
                                orderSubType = 0;
                            } else {
                                if (data.status == "ÇAĞRIDA") {
                                    $('#stopBtn').html("");
                                    $('#stopBtn').val("");
                                    stopBtn.hidden = true;
                                    orderType = "";
                                    orderSubType = 0;
                                }else {
                                    if (data.orderTypeStatus == true) {
                                        $('#stopBtn').html("VAZGEÇ");
                                        $('#stopBtn').val("VAZGEÇ");
                                        stopBtn.hidden = false;
                                        orderType = "";
                                        orderSubType = 0;
                                    } else {
                                        $('#stopBtn').html(data.status + " BİTİR");
                                        $('#stopBtn').val(data.status + " BİTİR");
                                        stopBtn.hidden = false;
                                        orderType = data.orderType;
                                        orderSubType = data.orderSubType;
                                    }
                                }
                            }
                        }
                    }
                }
            })

        }

        function acwStart() {
            loadedAMModalStart();
            var users = $('#agent_select').select2('data');
            users = JSON.stringify(users);

            var acwTypeId = $('#acw_select').select2('data');
            acwTypeId = JSON.stringify(acwTypeId);

            $.ajax({
                method: "POST",
                url: "{{ path('acwLogAllStart') }}",
                data: {
                    users: users,
                    acwTypeId: acwTypeId
                },
                success: function (data) {
                    console.log(data);
                    if (data.result == 1) {
                        setTimeout(
                            function () {
                                loadedAMModalStop();
                            }, 1000);
                        statusControl();
                    } else {
                        if (data.result == 0) {
                            loadedAMModalStart(data.text);
                            $("#loadModalAnimation").css("display", "none");
                            $(".modal-content").css("background-color", "red");
                            $(".modal-content").css("color", "white");
                            setTimeout(
                                function () {
                                    loadedAMModalStop();
                                    $("#loadModalAnimation").css("display", "block");
                                    $(".modal-content").css("background-color", "white");
                                    $(".modal-content").css("color", "black");
                                    statusControl();
                                }, 2000);
                        }
                    }
                }
            })
        }

        function acwStop() {
            loadedAMModalStart();
            var users = $('#agent_select').select2('data');
            users = JSON.stringify(users);

            $.ajax({
                method: "POST",
                url: "/agentManagement/acwLogAllStop",
                data: {
                    users: users,
                    orderType:orderType,
                    orderSubType:orderSubType
                },
                success: function (data) {
                    console.log(data);
                    if (data.result == 1) {
                        setTimeout(
                            function () {
                                loadedAMModalStop();
                            }, 1000);
                        statusControl();
                    } else {
                        if (data.result == 0) {
                            loadedAMModalStart(data.text);
                            $("#loadModalAnimation").css("display", "none");
                            $(".modal-content").css("background-color", "red");
                            $(".modal-content").css("color", "white");
                            setTimeout(
                                function () {
                                    loadedAMModalStop();
                                    $("#loadModalAnimation").css("display", "block");
                                    $(".modal-content").css("background-color", "white");
                                    $(".modal-content").css("color", "black");
                                    statusControl();
                                }, 2000);
                        }
                    }
                }
            })
        }

        function agentBreakClose() {
            // loadedAMModalStart();
            var users = $('#agent_select').select2('data');
            // users = JSON.stringify(users);
            for (var i=0;i<users.length;i++)
            {
                $.ajax({
                    url:  "/agent/logout/"+users[i].id,
                    success: function (data) {
                        console.log('Freddy Crugger');
                    }
                });
            }


        }
    </script>
{% endblock %}
{% block body %}
    <div class="row page-titles">
        <div class="col-md-5 align-self-center">
            <h4 class="text-themecolor">Temsilci Yönetimi</h4>
        </div>
        <div class="col-md-7 align-self-center text-right">
            <div class="d-flex justify-content-end align-items-center">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Anasayfa</a></li>
                    <li class="breadcrumb-item active">Skill Yönetimi</li>
                </ol>
                {#<button type="button" class="btn btn-info d-lg-block m-l-15"><i class="far fa-save"></i> Kaydet</button>#}
            </div>
        </div>
    </div>
    <!-- ============================================================== -->
    <!-- End Bread crumb and right sidebar toggle -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <!-- Start Page Content -->
    <!-- ============================================================== -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive m-t-40 table_mola_kontrol_div">
                        <!-- ============================================================== -->
                        <!-- Topbar header - style you can find in pages.scss -->
                        <!-- ============================================================== -->
                        <div class="col-sm-12">
                            <div class="col-md-5 skill_management_div_left">
                                <div class="col-md-6 skill_form_group_div">
                                    <div class="form-group row col-md-12">
                                        <div class="col-md-12">
                                            <label class="control-label text-right">Temsilci Grup Seçimi</label>
                                            <select class="form-control" id="agent_group">
                                                <option value="Temsilci Seç">Temsilci Gurubu Seçiniz..</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 skill_form_group_div">
                                    <div class="form-group row col-md-12">
                                        <div class="col-md-12">
                                            <label class="control-label text-right">Temsilci Seçimi</label>
                                            <select class="form-control" multiple id="agent_select">
                                                <option value="Temsilci Seç">Temsilci Seçiniz..</option>

                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-7 skill_management_div_right">
                                <div class="row col-md-12 div_table_agent_bilgileri">
                                    <div class="card col-md-12 div_table_agent_bilgileri">
                                        <div class="card-body col-md-12 div_table_agent_bilgileri">
                                            <h4 class="card-title" id="agentStatus">Durumu : </h4>
                                            <h4 class="card-title" id="agentExtension">Dahili : </h4>
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-info  d-lg-block m-l-15"
                                            onclick="statusControl()"><i class="fas fa-sync-alt"></i></button>
                                    <button type="button" id="stopBtn" hidden class="btn btn-danger"
                                            onclick="acwStop();" style="margin-left: 15px!important;"></button>
                                </div>

                                <hr style="margin-bottom: 30px!important;">
                                <style>
                                    .agent_arama_div {
                                        max-width: 1000px !important;
                                    }
                                </style>
                                <div class="form-group row col-md-12 agent_arama_div"
                                     style="margin-top: 10px!important;">
                                    <div class="col-md-12">
                                        <div class="col-md-6" style="float: left; padding-left: 0px!important;">
                                            <select id="acw_select" class="form-control custom-select"
                                                    style="width: 100%!important;">
                                                <option value="Durum Seçiniz" selected>--- Durum Seçiniz ---</option>
                                            </select>
                                        </div>
                                        <div class="col-md-5 input-group agent_arama_btn"
                                             style="float: left!important; margin-bottom: 25px!important; margin-right: 10px!important;">
                                            <button type="button" class="btn btn-warning" onclick="acwStart();"
                                                    style="max-width: 180px!important; padding-left: 3px!important; padding-right: 3px!important; margin-right: 10px!important;">
                                                Durumu Değiştir
                                            </button>
                                            <button  type="button" class="btn btn-warning" onclick="agentBreakClose()"
                                                    style="max-width: 180px!important; padding-left: 3px!important; padding-right: 3px!important; margin-right: 10px!important;">
                                                Durumunu Kapat
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row col-md-12 agent_arama_div"
                                     style="margin-top: 10px!important;">
                                    <div class="col-md-12">
                                        <div class="col-md-6" style="float: left; padding-left: 0px!important;">
                                            <select id="listenVal" class="form-control custom-select"
                                                    style="width: 100%!important;">
                                                <option value="İşlem Seçiniz" selected>--- İşlem Seçiniz ---</option>
                                                <option value="22">Dinle</option>
                                                <option value="33">Fısılda</option>
                                            </select>
                                        </div>
                                        <div class="col-md-6 input-group agent_arama_btn"
                                             style="margin-bottom: 25px!important; float:left;">
                                            <button type="button" class="btn btn-primary"
                                                    style="max-width: 180px!important;" id="btnListen"
                                                    onclick="listenStart();">Dinlemeye Başla
                                            </button>
                                            <button type="button" class="btn btn-danger"
                                                    style="max-width: 180px!important; visibility: hidden;"
                                                    id="btnHangup" onclick="sipHangUp();">Dinlemeyi Bitir
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- ============================================================== -->
                        <!-- End Topbar header -->
                        <!-- ============================================================== -->

                        <!-- MODAL START -->
                        <div class="modal fade" id="loadAgentM" tabindex="-1" role="dialog"
                             aria-labelledby="exampleModalLabel"
                             aria-hidden="true">
                            <div class="modal-dialog" role="document" style="max-width: 80%!important;">
                                <div class="modal-content col-lg-10" style="max-width: 100%!important;">
                                    <div class="modal-body">
                                        <h1 id="loadAgentMText"></h1>
                                        <div class="outer" id="loadModalAnimation">
                                            <div class="inner">
                                                <div class="small"></div>
                                                <div class="small"></div>
                                                <div class="small"></div>
                                                <div class="small"></div>
                                            </div>
                                            <div class="big">
                                                <div class="small"></div>
                                            </div>
                                            <div class="big">
                                                <div class="small"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- MODAL FINISH -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/softphoneAsset/SIPml-api.js?svn=252" type="text/javascript"></script>
    <script>

        var tokenArray;
        var tokenVariableArray;
        var tokenUserName;
        var token = $.ajax({
            async: false,
            url: "{{ path('jwt') }}"
        }).responseJSON;

        window.localStorage.setItem('token', token.token);
        tokenArray = window.localStorage.getItem("token").split(".");
        tokenVariableArray = JSON.parse(atob(tokenArray[1]));
        tokenUserName = tokenVariableArray["username"];

    </script>

    <script type="text/javascript">

        var sTransferNumber, callID, isOutBoundFree;
        var oRingTone, oRingbackTone;
        var oSipStack, oSipSessionRegister, oSipSessionCall, oSipSessionTransferCall;
        var videoRemote, videoLocal, audioRemote;
        var bFullScreen = false;
        var oNotifICall;
        var bDisableVideo = false;
        var viewVideoLocal, viewVideoRemote, viewLocalScreencast; // <video> (webrtc) or <div> (webrtc4all)
        var oConfigCall;
        var oReadyStateTimer;
        //var toBeSentData = {};
        //var surveyFlag = "N";
        var CallOrigCallID;
        //var callStatus;
        // var ivrChoice;
        //var timer;
        //var siebelUsername = '{{ app.user.username }}';
        //var siebelData;
        var listenerExten = "{{ listenerExten }}"; ///framework.yaml da tanımlı
        var tbxSipServer = '{{ tbxSipServer }}';
        var listeningAgentNumber;

        C =
            {
                divKeyPadWidth: 220
            };

        window.onload = function () {
            window.console && window.console.info && window.console.info("location=" + window.location);

            videoLocal = document.getElementById("video_local");
            videoRemote = document.getElementById("video_remote");
            audioRemote = document.getElementById("audio_remote");

            //document.onkeyup = onKeyUp;
            //document.body.onkeyup = onKeyUp;
            //divCallCtrl.onmousemove = onDivCallCtrlMouseMove;

            // set debug level
            SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");
            //SIPml.setDebugLevel("4");

            // Initialize call button
            uiBtnCallSetText("Ara");

            var getPVal = function (PName) {
                var query = window.location.search.substring(1);
                var vars = query.split('&');
                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split('=');
                    if (decodeURIComponent(pair[0]) === PName) {
                        return decodeURIComponent(pair[1]);
                    }
                }
                return null;
            }

            var preInit = function () {
                // set default webrtc type (before initialization)
                var s_webrtc_type = getPVal("wt");
                var s_fps = getPVal("fps");
                var s_mvs = getPVal("mvs");
                var s_mbwu = getPVal("mbwu");
                var s_mbwd = getPVal("mbwd");
                var s_za = getPVal("za");
                var s_ndb = getPVal("ndb");

                if (s_webrtc_type) SIPml.setWebRtcType(s_webrtc_type);

                SIPml.init(postInit);
                sipRegister();


                // set other options after initialization
                if (s_fps) SIPml.setFps(parseFloat(s_fps));
                if (s_mvs) SIPml.setMaxVideoSize(s_mvs);
                if (s_mbwu) SIPml.setMaxBandwidthUp(parseFloat(s_mbwu));
                if (s_mbwd) SIPml.setMaxBandwidthDown(parseFloat(s_mbwd));
                if (s_za) SIPml.setZeroArtifacts(s_za === "true");
                if (s_ndb == "true") SIPml.startNativeDebug();

                //var rinningApps = SIPml.getRunningApps();
                //var _rinningApps = Base64.decode(rinningApps);
                //tsk_utils_log_info(_rinningApps);
            }

            oReadyStateTimer = setInterval(function () {
                    if (document.readyState === "complete") {
                        clearInterval(oReadyStateTimer);
                        // initialize SIPML5
                        preInit();
                    }
                },
                500);

            /*if (document.readyState === "complete") {
                preInit();
            }
            else {
                document.onreadystatechange = function () {
                     if (document.readyState === "complete") {
                        preInit();
                    }
                }
           }*/

        };

        function postInit() {

            // FIXME: displays must be per session
            viewVideoLocal = videoLocal;
            viewVideoRemote = videoRemote;

            if (!SIPml.isWebRtcSupported()) {
                if (confirm('Your browser don\'t support WebRTC.\naudio/video calls will be disabled.\nDo you want to download a WebRTC-capable browser?')) {
                    window.location = 'https://www.google.com/intl/en/chrome/browser/';
                }
            }


            document.body.style.cursor = 'default';
            oConfigCall = {
                audio_remote: audioRemote,
                video_local: viewVideoLocal,
                video_remote: viewVideoRemote,
                screencast_window_id: 0x00000000, // entire desktop
                bandwidth: {audio: undefined, video: undefined},
                video_size: {minWidth: undefined, minHeight: undefined, maxWidth: undefined, maxHeight: undefined},
                events_listener: {events: '*', listener: onSipEventSession},
                sip_caps: [
                    {name: '+g.oma.sip-im'},
                    {name: 'language', value: '\"en,fr\"'}
                ]
            };
            console.log("post init calıştı");
            console.log(oConfigCall);
        }


        function loadCallOptions() {
            if (window.localStorage) {
                var s_value;
                //if ((s_value = window.localStorage.getItem('org.doubango.call.phone_number'))) txtPhoneNumber.value = s_value;
                if ((s_value = window.localStorage.getItem('org.doubango.call.phone_number'))) listeningAgentNumber = s_value;
                bDisableVideo = (window.localStorage.getItem('org.doubango.expert.disable_video') == "true");

                //txtCallStatus.value = 'Video ' + (bDisableVideo ? 'disabled' : 'enabled') + '';
            }
        }

        function saveCallOptions() {
            if (window.localStorage) {
                //window.localStorage.setItem('org.doubango.call.phone_number', txtPhoneNumber.value);
                window.localStorage.setItem('org.doubango.call.phone_number', listeningAgentNumber);
                window.localStorage.setItem('org.doubango.expert.disable_video', bDisableVideo ? "true" : "false");
            }
        }

        function loadCredentials() {


            //txtDisplayName.value = "BHM Listener Client";
            //txtPrivateIdentity.value = listenerExten;
            //txtPublicIdentity.value = "sip:" + listenerExten    + "@"+tbxSipServer;
            //txtPassword.value = "Q1w2e3r4";
            //txtRealm.value = tbxSipServer;
        };

        function saveCredentials() {
            if (window.localStorage) {
                window.localStorage.setItem('org.doubango.identity.display_name', listenerExten);
                window.localStorage.setItem('org.doubango.identity.impi', listenerExten);
                window.localStorage.setItem('org.doubango.identity.impu', 'sip:' + listenerExten + "@" + tbxSipServer);
                // window.localStorage.setItem('org.doubango.identity.password', txtPassword.value);
                window.localStorage.setItem('org.doubango.identity.password', 'Q1w2e3r4');
                //window.localStorage.setItem('org.doubango.identity.realm', txtRealm.value);
                window.localStorage.setItem('org.doubango.identity.realm', tbxSipServer);
                window.localStorage.setItem('org.doubango.expert.disable_video', "true");
                window.localStorage.setItem('org.doubango.expert.enable_rtcweb_breaker', "true");
                window.localStorage.setItem('org.doubango.expert.ice_servers', "[]");
                window.localStorage.setItem('org.doubango.expert.disable_early_ims', "true");
                window.localStorage.setItem('org.doubango.expert.disable_debug', "true");
                window.localStorage.setItem('org.doubango.expert.enable_media_caching', "true");
                window.localStorage.setItem('org.doubango.expert.disable_callbtn_options', "false");


            }
        };

        // sends SIP REGISTER request to login
        function sipRegister() {

            $.ajax({
                type: 'GET',
                url: '{{ path('sipservercall') }}',
                headers: {
                    'Authorization': "Bearer " + getTokenStorage(),
                    'accept': "application/json",
                    'Content-Type': "application/json",
                },
                success: function (data) {

                    tbxSipServer = data.sipServerCall;

                    loadCredentials();
                    loadCallOptions();


                    // catch exception for IE (DOM not ready)
                    try {
                        // btnRegister.style.visibility = 'hidden';
                        /*
                        if (!txtRealm.value || !txtPrivateIdentity.value || !txtPublicIdentity.value) {
                             txtRegStatus.value = 'Zorunlu alanları doldurunuz';
                             console.log("Reg Status: ");
                             // btnRegister.style.visibility = 'visible';
                             return;
                         }
                         */
                        //console.log("Reg Status: Zorunlu alanları");

                        var o_impu = tsip_uri.prototype.Parse('sip:' + listenerExten + "@" + tbxSipServer);
                        if (!o_impu || !o_impu.s_user_name || !o_impu.s_host) {
                            // txtRegStatus.value = "" + txtPublicIdentity.value + "geçerli değil";
                            // btnRegister.visibility = 'visible';
                            console.log("Reg Status5: ");
                            return;
                        }

                        // enable notifications if not already done
                        if (window.webkitNotifications && window.webkitNotifications.checkPermission() != 0) {
                            window.webkitNotifications.requestPermission();
                        }

                        // save credentials
                        saveCredentials();

                        // update debug level to be sure new values will be used if the user haven't updated the page
                        SIPml.setDebugLevel((window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_debug') == "true") ? "error" : "info");
                        // SIPml.setDebugLevel("4");
                        // create SIP stack
                        oSipStack = new SIPml.Stack({
                                realm: tbxSipServer,
                                impi: listenerExten,
                                impu: "sip:" + listenerExten + "@" + tbxSipServer,
                                password: 'Q1w2e3r4',
                                display_name: 'BHM Listener Client',
                                websocket_proxy_url: 'wss://' + tbxSipServer + ':8089/ws',
                                outbound_proxy_url: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.sip_outboundproxy_url') : null),
                                ice_servers: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.ice_servers') : null),
                                enable_rtcweb_breaker: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.enable_rtcweb_breaker') == "true" : false),
                                events_listener: {events: '*', listener: onSipEventStack},
                                enable_early_ims: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.disable_early_ims') != "true" : true), // Must be true unless you're using a real IMS network
                                enable_media_stream_cache: (window.localStorage ? window.localStorage.getItem('org.doubango.expert.enable_media_caching') == "true" : false),
                                bandwidth: (window.localStorage ? tsk_string_to_object(window.localStorage.getItem('org.doubango.expert.bandwidth')) : null), // could be redefined a session-level
                                video_size: (window.localStorage ? tsk_string_to_object(window.localStorage.getItem('org.doubango.expert.video_size')) : null), // could be redefined a session-level
                                sip_headers: [
                                    {name: 'User-Agent', value: 'IM-client/OMA1.0 sipML5-v1.2016.03.04'},
                                    {name: 'Organization', value: 'Doubango Telecom'}
                                ]
                            }
                        );
                        if (oSipStack.start() != 0) {
                            //txtRegStatus.value = 'SIP bağlantısı gerçekleşmedi';
                            console.log("Reg Status6: Sip Bağlantısı gerçekleşmedi");
                        } else return;
                    } catch (e) {
                        //txtRegStatus.value = "2:" + e + "";
                        console.log("Reg Status7: " + e);
                    }
                    //btnRegister.style.visibility = 'visible';
                }
            });
        }

        // sends SIP REGISTER (expires=0) to logout
        function sipUnRegister() {
            if (oSipStack) {
                oSipStack.stop(); // shutdown all sessions
                // $("#btnPause").css("display","block")
                //$("#btnRegister").css("display", "block")


                setTimeout(function () {
                    sipRegister();
                }, 5000);

            }
        }

        // makes a call (SIP INVITE)
        /*
                function outBoundFree() {
                    toBeSentData.body = {Description: 'Giden Çağrı Araması: (' + txtPhoneNumber.value + ')', "Type": "Çağrı - Giden",
                        "ActivitySubtype": "Çağrı - Giden"};
                    isOutBoundFree = true;
                    outboundCall('call-audio');
                }
        */
        function outboundCall(s_type, callNumber) {
            // callType = "outBound";
            // alert(callType);
            btnListen.style.visibility = "hidden";
            btnHangup.style.visibility = "visible";


            if (oSipStack && !oSipSessionCall && !tsk_string_is_null_or_empty(callNumber)) {
                if (s_type == 'call-screenshare') {
                    if (!SIPml.isScreenShareSupported()) {
                        alert('Screen sharing not supported. Are you using chrome 26+?');
                        return;
                    }
                    if (!location.protocol.match('https')) {
                        if (confirm("Screen sharing requires https://. Do you want to be redirected?")) {
                            sipUnRegister();
                            window.location = 'https://ns313841.ovh.net/call.htm';
                        }
                        return;
                    }
                }


                // create call session
                oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);
                // make call
                if (oSipSessionCall.call(callNumber) != 0) {
                    oSipSessionCall = null;
                    // txtCallStatus.value = 'Çağrı Başarısız';
                    //txtCallStatusOut.value = 'Çağrı Başarısız';

                    //callStatus = "Yanıt Yok";

                    //btnAra.disabled = false;
                    //btnHangUp.disabled = true;
                    return;
                }
                saveCallOptions();
            } else if (oSipSessionCall) {
                //txtCallStatus.value = 'Bağlanıyor dış arama';
                //txtCallStatusOut.value = 'Bağlanıyor dışarama';
                oSipSessionCall.accept(oConfigCall);

                // callStatus = "Tamamlandı";
            }
        }

        // makes a call (SIP INVITE)
        function sipCall(s_type) {
            //var rehberNumara = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
            //rehberKayitBul(rehberNumara);
            //callType = "inBound";
            // alert(callType);

            // txtCallStatus.value = 'Bağlanıyor gelen';
            // txtCallStatusOut.value = 'Bağlanıyor gelen';

            //console.log("gelen cagrı");
            //   console.log(oConfigCall);


            oSipSessionCall.accept(oConfigCall);

        }

        // Share entire desktop aor application using BFCP or WebRTC native implementation
        function sipShareScreen() {
            if (SIPml.getWebRtcType() === 'w4a') {
                // Sharing using BFCP -> requires an active session
                if (!oSipSessionCall) {
                    //txtCallStatus.value = 'Aktif Bağlantı Yok';
                    //txtCallStatusOut.value = 'Aktif Bağlantı Yok';
                    return;
                }
                if (oSipSessionCall.bfcpSharing) {
                    if (oSipSessionCall.stopBfcpShare(oConfigCall) != 0) {
                        // txtCallStatus.value = 'Hata Oluştu';
                        // txtCallStatusOut.value = 'Hata Oluştu';
                    } else {
                        oSipSessionCall.bfcpSharing = false;
                    }
                } else {
                    oConfigCall.screencast_window_id = 0x00000000;
                    if (oSipSessionCall.startBfcpShare(oConfigCall) != 0) {
                        // txtCallStatus.value = 'Hata Oluştu';
                        //txtCallStatusOut.value = 'Hata Oluştu';
                    } else {
                        oSipSessionCall.bfcpSharing = true;
                    }
                }
            } else {
                sipCall('call-screenshare');
            }
        }

        // transfers the call


        // Mute or Unmute the call


        // terminates the call (SIP BYE or CANCEL)
        function sipHangUp() {
            if (oSipSessionCall) {
                oSipSessionCall.hangup({events_listener: {events: '*', listener: onSipEventSession}});


                //txtCallStatus.value = 'Çağrı Kapatıldı';
                //txtCallStatusOut.value = 'Çağrı Kapatıldı';
                //toBeSentData.body.Status = "Temsilci Tarafından Kapatıldı";


                // var completeTime = moment().format('M/D/Y H:mm:ss');


                // toBeSentData.body.PlannedCompletion = completeTime.toLocaleString();


                //stopTimerOwn();
                //callFlashingStop();

                //console.log("kapata basıldı");

                //console.log(toBeSentData);
                // createActivity(toBeSentData);

            }
        }


        function startRingTone() {
            try {
                ringtone.play();
            } catch (e) {
            }
        }

        function stopRingTone() {
            try {
                ringtone.pause();
            } catch (e) {
            }
        }

        function startRingbackTone() {
            try {
                ringbacktone.play();
            } catch (e) {
            }
        }

        function stopRingbackTone() {
            try {
                ringbacktone.pause();
            } catch (e) {
            }
        }

        function toggleFullScreen() {
            if (videoRemote.webkitSupportsFullscreen) {
                fullScreen(!videoRemote.webkitDisplayingFullscreen);
            } else {
                fullScreen(!bFullScreen);
            }
        }

        function openKeyPad() {
            divKeyPad.style.visibility = 'visible';
            divKeyPad.style.left = document.getElementById("btnKeyPad").clientLeft;
            divKeyPad.style.top = '70px';
            // divGlassPanel.style.visibility = 'visible';
        }

        function closeKeyPad() {
            divKeyPad.style.left = '0px';
            divKeyPad.style.top = '0px';
            divKeyPad.style.visibility = 'hidden';
            // divGlassPanel.style.visibility = 'hidden';
        }

        function fullScreen(b_fs) {
            bFullScreen = b_fs;
            if (tsk_utils_have_webrtc4native() && bFullScreen && videoRemote.webkitSupportsFullscreen) {
                if (bFullScreen) {
                    videoRemote.webkitEnterFullScreen();
                } else {
                    videoRemote.webkitExitFullscreen();
                }
            } else {
                if (tsk_utils_have_webrtc4npapi()) {
                    try {
                        if (window.__o_display_remote) window.__o_display_remote.setFullScreen(b_fs);
                    } catch (e) {
                        divVideo.setAttribute("class", b_fs ? "full-screen" : "normal-screen");
                    }
                } else {
                    divVideo.setAttribute("class", b_fs ? "full-screen" : "normal-screen");
                }
            }
        }


        /*function onDivCallCtrlMouseMove(evt) {
          try { // IE: DOM not ready
            if (tsk_utils_have_stream()) {
              btnCall.disabled = (!tsk_utils_have_stream() || !oSipSessionRegister || !oSipSessionRegister.is_connected());
              document.getElementById("divCallCtrl").onmousemove = null; // unsubscribe
            }
          }
          catch (e) {
          }
        }*/

        function uiOnConnectionEvent(b_connected, b_connecting) { // should be enum: connecting, connected, terminating, terminated
            //btnRegister.style.display = b_connected || b_connecting ? 'none' : 'block';
            //btnUnRegister.style.display = !b_connected && !b_connecting ? 'none' : 'block';
            //btnAra.disabled = !(b_connected && tsk_utils_have_webrtc() && tsk_utils_have_stream());
            //btnHangUp.disabled = !oSipSessionCall;
        }

        function uiVideoDisplayEvent(b_local, b_added) {

        }


        function uiDisableCallOptions() {
            if (window.localStorage) {
                window.localStorage.setItem('org.doubango.expert.disable_callbtn_options', 'true');
                uiBtnCallSetText('Ara');
                alert('Use expert view to enable the options again (/!\\requires re-loading the page)');
            }
        }

        function uiBtnCallSetText(s_text) {
            switch (s_text) {
                case "Ara": {
                    var bDisableCallBtnOptions = (window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_callbtn_options') == "true");
                    // btnAra.value = bDisableCallBtnOptions ? 'Ara' : 'Ara <span id="spanCaret" class="caret">';
                    //btnCall.setAttribute("class", bDisableCallBtnOptions ? "btn btn-primary" : "btn btn-primary dropdown-toggle");
                    // btnAra.onclick = bDisableCallBtnOptions ? function () {
                    // sipCall(bDisableVideo ? 'call-audio' : 'call-audiovideo');
                    //} : null;
                    // ulCallOptions.style.visibility = bDisableCallBtnOptions ? "hidden" : "visible";
                    // if (!bDisableCallBtnOptions && ulCallOptions.parentNode != divBtnCallGroup) {
                    //   divBtnCallGroup.appendChild(ulCallOptions);
                    // }
                    // else if (bDisableCallBtnOptions && ulCallOptions.parentNode == divBtnCallGroup) {
                    //   document.body.appendChild(ulCallOptions);
                    // }

                    break;
                }
                default: {
                    //btnAra.value = btnAra.innerHTML = s_text;
                    //btnAra.setAttribute("class", "btn btn-primary");
                    //btnAra.onclick = function () {
                    //     sipCall(bDisableVideo ? 'call-audio' : 'call-audiovideo');
                    //};
                    //ulCallOptions.style.visibility = "hidden";
                    //if (ulCallOptions.parentNode == divBtnCallGroup) {
                    //document.body.appendChild(ulCallOptions);
                    //}
                    break;
                }
            }
        }

        function uiCallTerminated(s_description) {
            // alert("Kapandı");

            //uiBtnCallSetText("Ara");
            //btnHangUp.value = 'Kapat';
            //btnHoldResume.value = 'Beklet';
            //btnMute.value = "Sessiz";
            //btnAra.disabled = false;
            //btnHangUp.disabled = true;
            //btnHoldResume.disabled = true;
            //btnMute.disabled = true;
            //btnTransfer.disabled = true;
            //ivrMenu.disabled = true;
            //if (window.btnBFCP) window.btnBFCP.disabled = true;

            //var completeTime = moment().format('M/D/Y H:mm:ss');
            //toBeSentData.body.PlannedCompletion = completeTime.toLocaleString();

            ///cağrı suresini durdurrrrrr
            //stopTimerOwn();
            //callFlashingStop();
            //createActivity(toBeSentData);


            //clearIvrValue();
            oSipSessionCall = null;

            stopRingbackTone();
            stopRingTone();

            // txtCallStatus.value = "" + s_description + "";
            //txtCallStatusOut.value.value = "" + s_description + "";
            //uiVideoDisplayShowHide(false);
            // divCallOptions.style.opacity = 0;

            if (oNotifICall) {
                oNotifICall.cancel();
                oNotifICall = null;
            }

            uiVideoDisplayEvent(false, false);
            uiVideoDisplayEvent(true, false);


        }

        //yorum
        // Callback function for SIP Stacks
        function onSipEventStack(e /*SIPml.Stack.Event*/) {

            tsk_utils_log_info('==stack event = ' + e.type);
            console.log(e);
            switch (e.type) {
                case 'started': {

                    // catch exception for IE (DOM not ready)
                    try {
                        // LogIn (REGISTER) as soon as the stack finish starting
                        oSipSessionRegister = this.newSession('register', {
                            expires: 200,
                            events_listener: {events: '*', listener: onSipEventSession},
                            sip_caps: [
                                {name: '+g.oma.sip-im', value: null},
                                //{ name: '+sip.ice' }, // rfc5768: FIXME doesn't work with Polycom TelePresence
                                {name: '+audio', value: null},
                                {name: 'language', value: '\"en,fr\"'}
                            ]
                        });
                        oSipSessionRegister.register();
                    } catch (e) {
                        //txtRegStatus.value = txtRegStatus.value = "1:" + e + "";
                        console.log("Reg Status1: " + e);
                        //btnRegister.disabled = false;
                    }

                    //callStatus = "Çağrı Başladı";
                    break;
                }
                case 'st' : {

                    // console.log('st**');
                    getApiDataFromHeader(e.o_event.o_message.ao_headers);
                    // callStatus = "Çalıyor";
                    break;


                }
                case 'stopping':
                case 'stopped':
                case 'failed_to_start':
                case 'failed_to_stop': {
                    var bFailure = (e.type == 'failed_to_start') || (e.type == 'failed_to_stop');
                    oSipStack = null;
                    oSipSessionRegister = null;

                    oSipSessionCall = null;

                    uectionEventiOnConn(false, false);

                    stopRingbackTone();
                    stopRingTone();

                    //uiVideoDisplayShowHide(false);
                    // divCallOptions.style.opacity = 0;

                    //txtCallStatus.value = '';
                    //txtCallStatusOut.value = '';
                    //txtRegStatus.value = bFailure ? "Bağlantı Kesildi: " + e.description + "" : "Bağlantı Kesildi";
                    console.log("Reg Status2: Bağlantı kesildi" + e.description);
                    //callStatus = "Bağlantı Kesildi";
                    break;
                }

                case 'i_new_call': {


                    if (!oSipSessionCall) {
                        oSipSessionCall = e.newSession;
                        // start listening for events
                        oSipSessionCall.setConfiguration(oConfigCall);

                        //uiBtnCallSetText('Answer');
                        //btnHangUp.value = 'Reject';
                        //btnCall.disabled = false;
                        //btnHangUp.disabled = false;

                        startRingTone();

                        var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
                        //  var sRemoteName = (SIPml.Event.prototype.getContentString()|| 'unknown');

                        getApiDataFromHeader(e.o_event.o_message.ao_headers);
                        //txtCallStatus.value = "Gelen Çağrı *" + sRemoteNumber + "";
                        // $("#txtInboundNumber").html("Gelen Çağrı * " + sRemoteNumber + "");
                        // txtInboundNumber.html = "Gelen Çağrı * " + sRemoteNumber + "";

                        //  callFlashingStart();
                        // callStatus = "Tamamlandı";


                        // siebelCreateSR("+"+sRemoteNumber, callID);
                        //showNotifICall(sRemoteNumber);
                        // rehberKayitBul(sRemoteNumber);


                        sipCall('call-audio');
                        // clearInterval(callFlashing);
                        // $("#myTabContent").css("background-color", "white");


                        // var startDate = moment().format('M/D/Y H:mm:ss');

                        //  var ivrChoiceList = [];
                        // var dataIvrChoice = null;


                        // 2. setter fonksiyon, ajax gelen datayı işliyor.


                        // 1. ajax request return yok, üst setter fonksiyona atıyor.


                        (sRemoteNumber);

                    } else {
                        // do not accept the incoming call if we're already 'in call'
                        stopRingbackTone();
                        stopRingTone();

                        e.newSession.hangup(); // comment this line for multi-line support

                    }
                    break;
                }

                case 'm_permission_requested': {
                    // divGlassPanel.style.visibility = 'visible';
                    //callStatus = "Çağrı Tamamlanamadı";
                    break;
                }
                case 'm_permission_accepted':
                case 'm_permission_refused': {
                    // divGlassPanel.style.visibility = 'hidden';
                    if (e.type == 'm_permission_refused') {
                        uiCallTerminated('Mikrofona izin verilmedi');
                    }
                    //callStatus = "Çağrı Tamamlanamadı";
                    break;
                }

                case 'starting':
                default:
                    break;
            }
        };


        // Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
        function onSipEventSession(e /* SIPml.Session.Event */) {
            tsk_utils_log_info('==session event = ' + e.type);

            switch (e.type) {
                case 'connecting':
                case 'connected': {
                    var bConnected = (e.type == 'connected');
                    if (e.session == oSipSessionRegister) {
                        uiOnConnectionEvent(bConnected, !bConnected);
                        //txtRegStatus.value = "" + e.description + "";
                        console.log("Reg Status3: " + e.description);
                    } else if (e.session == oSipSessionCall) {
                        //btnHangUp.value = 'Kapat';
                        // btnAra.disabled = true;
                        //btnHangUp.disabled = false;
                        //btnHoldResume.disabled = false;
                        //btnMute.disabled = false;
                        //btnTransfer.disabled = false;
                        //ivrMenu.disabled = false;
                        if (window.btnBFCP) window.btnBFCP.disabled = false;

                        if (bConnected == true) {
                            stopRingbackTone();
                            stopRingTone();
                            ///çağrı süresini saydır
                            //startTimer();

                            if (oNotifICall) {
                                oNotifICall.cancel();
                                oNotifICall = null;
                            }
                        }

                        //txtCallStatus.value = "" + e.description + "";
                        //txtCallStatusOut.value = "" + e.description + "";
                        // divCallOptions.style.opacity = bConnected ? 1 : 0;
                        //callStatus = "Tamamlandı";

                        if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback
                            uiVideoDisplayEvent(false, true);
                            uiVideoDisplayEvent(true, true);
                        }
                    }
                    break;
                } // 'connecting' | 'connected'
                case 'terminating':
                case 'terminated': {
                    btnListen.style.visibility = "visible";
                    btnHangup.style.visibility = "hidden";

                    if (e.session == oSipSessionRegister) {
                        uiOnConnectionEvent(false, false);

                        oSipSessionCall = null;
                        oSipSessionRegister = null;

                        // txtRegStatus.value = "" + e.description + "";
                        console.log("Reg Status4: " + e.description);
                    } else if (e.session == oSipSessionCall) {
                        uiCallTerminated(e.description);
                    }
                    // callStatus = "Yanıt Yok";
                    break;
                } // 'terminating' | 'terminated'

                case 'm_stream_video_local_added': {
                    if (e.session == oSipSessionCall) {
                        uiVideoDisplayEvent(true, true);
                    }
                    break;
                }
                case 'm_stream_video_local_removed': {
                    if (e.session == oSipSessionCall) {
                        uiVideoDisplayEvent(true, false);
                    }
                    break;
                }
                case 'm_stream_video_remote_added': {
                    if (e.session == oSipSessionCall) {
                        uiVideoDisplayEvent(false, true);
                    }
                    break;
                }
                case 'm_stream_video_remote_removed': {
                    if (e.session == oSipSessionCall) {
                        uiVideoDisplayEvent(false, false);
                    }
                    break;
                }

                case 'm_stream_audio_local_added':
                case 'm_stream_audio_local_removed':
                case 'm_stream_audio_remote_added':
                case 'm_stream_audio_remote_removed': {
                    break;
                }

                case 'i_ect_new_call': {
                    oSipSessionTransferCall = e.session;
                    break;
                }

                case 'i_ao_request': {
                    if (e.session == oSipSessionCall) {
                        var iSipResponseCode = e.getSipResponseCode();
                        if (iSipResponseCode == 180 || iSipResponseCode == 183) {
                            //toBeSentData.body.CallId = e.o_event.o_message.o_hdr_Call_ID.s_value;


                            if (isOutBoundFree == true) {
                                //siebelCreateSR(txtPhoneNumber.value ,e.o_event.o_message.o_hdr_Call_ID.s_value);
                                //isOutBoundFree = false
                            }

                            startRingbackTone();
                            //txtCallStatus.value = 'Çalıyor...';
                            // txtCallStatusOut.value = 'Çalıyor...';
                            //startTimer();
                            // console.log("stop timer yaptım");
                            // callStatus = "Meşgul";
                        }
                    }

                    break;
                }

                case 'm_early_media': {
                    if (e.session == oSipSessionCall) {
                        stopRingbackTone();
                        stopRingTone();
                        //txtCallStatus.value = 'Medya Aktif';
                        //txtCallStatusOut.value = 'Medya Aktif';
                    }
                    break;
                }

                case 'm_local_hold_ok': {
                    if (e.session == oSipSessionCall) {
                        if (oSipSessionCall.bTransfering) {
                            oSipSessionCall.bTransfering = false;
                            // this.AVSession.TransferCall(this.transferUri);
                        }
                        // btnHoldResume.value = 'Geri Al';
                        // btnHoldResume.disabled = false;
                        // txtCallStatus.value = 'Bekletiliyor';
                        // txtCallStatusOut.value = 'Bekletiliyor';
                        oSipSessionCall.bHeld = true;
                    }
                    break;
                }
                case 'm_local_hold_nok': {
                    if (e.session == oSipSessionCall) {
                        oSipSessionCall.bTransfering = false;
                        // btnHoldResume.value = 'Beklet';
                        //  btnHoldResume.disabled = false;
                        //txtCallStatus.value = 'hata';
                        //txtCallStatusOut.value = 'hata';
                    }
                    break;
                }
                case 'm_local_resume_ok': {
                    if (e.session == oSipSessionCall) {
                        oSipSessionCall.bTransfering = false;
                        //btnHoldResume.value = 'Beklet';
                        // btnHoldResume.disabled = false;
                        // txtCallStatus.value = 'Bekletiliyor';
                        // txtCallStatusOut.value = 'Bekletiliyor';
                        oSipSessionCall.bHeld = false;

                        if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback yet
                            uiVideoDisplayEvent(false, true);
                            uiVideoDisplayEvent(true, true);
                        }
                    }
                    break;
                }
                case 'm_local_resume_nok': {
                    if (e.session == oSipSessionCall) {
                        oSipSessionCall.bTransfering = false;
                        // btnHoldResume.disabled = false;
                        // txtCallStatus.value = 'Hata';
                        // txtCallStatusOut.value = 'Hata';
                    }
                    break;
                }
                case 'm_remote_hold': {
                    if (e.session == oSipSessionCall) {
                        // txtCallStatus.value = '';
                        //txtCallStatusOut.value = '';
                    }
                    break;
                }
                case 'm_remote_resume': {
                    if (e.session == oSipSessionCall) {
                        //txtCallStatus.value = '';
                        //txtCallStatusOut.value = '';
                    }
                    break;
                }
                case 'm_bfcp_info': {
                    if (e.session == oSipSessionCall) {
                        //txtCallStatus.value = '' + e.description + '';
                        //txtCallStatusOut.value = '' + e.description + '';
                    }
                    break;
                }

                case 'o_ect_trying': {
                    if (e.session == oSipSessionCall) {
                        // txtCallStatus.value = 'Çağrı Yönlendiriliyor';
                        // txtCallStatusOut.value = 'Çağrı Yönlendiriliyor';
                    }
                    break;
                }
                case 'o_ect_accepted': {
                    if (e.session == oSipSessionCall) {
                        // txtCallStatus.value = 'Çağrı Yönlendirme Başarılı';
                        //  txtCallStatusOut.value = 'Çağrı Yönlendirme Başarılı';
                    }
                    break;
                }
                case 'o_ect_completed':
                case 'i_ect_completed': {
                    if (e.session == oSipSessionCall) {
                        //txtCallStatus.value = 'Çağrı Yönlendirme Başarılı';
                        // txtCallStatusOut.value = 'Çağrı Yönlendirme Başarılı';
                        // btnTransfer.disabled = false;
                        if (oSipSessionTransferCall) {
                            oSipSessionCall = oSipSessionTransferCall;
                        }
                        oSipSessionTransferCall = null;
                    }
                    break;
                }
                case 'o_ect_failed':
                case 'i_ect_failed': {
                    if (e.session == oSipSessionCall) {
                        // txtCallStatus.value = 'Çağrı Yönlendirme Başarısız';
                        //txtCallStatusOut.value = 'Çağrı Yönlendirme Başarısız';
                        // btnTransfer.disabled = false;
                    }
                    break;
                }
                case 'o_ect_notify':
                case 'i_ect_notify': {
                    if (e.session == oSipSessionCall) {
                        //txtCallStatus.value = "Çağrı Aktarma:" + e.getSipResponseCode() + " " + e.description + "";
                        //txtCallStatusOut.value = "Çağrı Aktarma:" + e.getSipResponseCode() + " " + e.description + "";
                        if (e.getSipResponseCode() >= 300) {
                            if (oSipSessionCall.bHeld) {
                                oSipSessionCall.resume();
                            }
                            // btnTransfer.disabled = false;
                        }
                    }
                    break;
                }
                case 'i_ect_requested': {
                    if (e.session == oSipSessionCall) {
                        var s_message = "Çağrı şuraya yönlenecek" + e.getTransferDestinationFriendlyName() + "]?";//FIXME
                        if (confirm(s_message)) {
                            // txtCallStatus.value = "Çağrı Aktarılıyor...";
                            // txtCallStatusOut.value = "Çağrı Aktarılıyor...";
                            oSipSessionCall.acceptTransfer();
                            break;
                        }
                        oSipSessionCall.rejectTransfer();
                    }
                    break;
                }
            }
        }

    </script>


    <script>
        Date.prototype.toDateInputValue = (function () {
            var local = new Date(this);
            local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
            return local.toJSON().slice(0, 10);
        });

        $('#date').val(new Date().toDateInputValue());


        $(function () {
            var d = new Date(),
                h = d.getHours(),
                m = d.getMinutes();
            if (h < 10) h = '0' + h;
            if (m < 10) m = '0' + m;
            $('input[type="time"][value="now"]').each(function () {
                $(this).attr({'value': h + ':' + m});
            });
        });
    </script>

    <script>
        function getCurrentDateTimeMySql() {
            var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
            var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, 19).replace('T', ' ');
            var mySqlDT = localISOTime;
            return mySqlDT;
        }
    </script>











    <script type="text/javascript">
        function listenStart() {
            var l_number = $("#listenVal").val() + agentExten;
            console.log($("#listenVal"));
            console.log(l_number);
            outboundCall("call-audio", l_number);

        }
    </script>


    <script type="text/javascript">
        jQuery(function () {
            jQuery(window).bind('beforeunload', function () {
                return 'Sayfadan ayrılmak istediğinizden eminmisiniz..';
            });
        });
    </script>
{% endblock %}