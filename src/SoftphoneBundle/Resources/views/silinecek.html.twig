<script>
  function outBoundFree() {

    if (molaDisArama == 1) {
      $.ajax({
        type: 'GET',
        url: '{{ path('out_aound_acw_control') }}',
        headers: {
          'Authorization': "Bearer " + getTokenStorage(),
          'accept': "application/json",
          'Content-Type': "application/json",
        },
        success: function (data) {
          if (data == 1) {
            molaDisArama = 0;
            $('#doneToCall').html('Hazır Duruma Geç');
            $('#doneToCall').css('display', 'none');
            doneToCall.disabled = true;
            doneToCall.hidden = true;
            btnUnRegister.hidden = false;
            $('#btnUnRegister').css('display', 'block');
          }
        }
      });
    } else {
      $.ajax({
        type: 'GET',
        url: '/api/oudbound-call-pauser',
        headers: {
          'Authorization': "Bearer " + getTokenStorage(),
          'accept': "application/json",
          'Content-Type': "application/json",
        },
        success: function (data) {
        }
      });
    }

    number = txtPhoneNumber.value;
    if (tbxDebug == true) console.log("number log == " + number);
    var prefix = number.substr(0, 1);
    if (prefix == 0) {
      number = "+9" + number;
    }

    if (isOutboundSRCall == false) {
      toBeSentData.body = {
        Description: 'Giden Çağrı Araması: (' + number + ')', "Type": "Çağrı - Giden",
        "ActivitySubtype": "Çağrı - Giden"
      };
      isOutBoundFree = true;
    }
    outboundCall('call-audio');
    outboundStopTimerCallBtn();
  }

  function outboundCall(s_type) {
    callType = "outBound";
    activeCall = true;
    // alert(callType);

    outBoundHangUpBtn.disabled = false;
    outBoundHoldBtn.disabled = false;
    outBoundMuteBtn.disabled = false;
    btnSendSurvey.disabled = false;
    ivrMenuOutbound.disabled = false;

    var startDate = moment().format('M/D/Y H:mm:ss');
    toBeSentData.body.Planned = startDate;
    toBeSentData.body.Started = startDate;
    toBeSentData.body.UserName = siebelUsername;
    toBeSentData.body.CallId = callID;
    toBeSentData.body.Status = callStatus;


    if (oSipStack && !oSipSessionCall && !tsk_string_is_null_or_empty(txtPhoneNumber.value)) {
      if (s_type == 'call-screenshare') {
        if (!SIPml.isScreenShareSupported()) {
          alert('Screen sharing not supported. Are you using chrome 26+?');
          return;
        }
        if (!location.protocol.match('https')) {
          if (confirm("Screen sharing requires https://. Do you want to be redirected?")) {
            sipUnRegister();
            window.location = 'https://ns313841.ovh.net/call.htm';
          }
          return;
        }
      }
      btnAra.disabled = true;
      btnHangUp.disabled = false;
      homeBtn.hidden = true;
      $('#homeBtn').css('display', 'none');

      // outBoundStartTimer();

      // create call session
      oSipSessionCall = oSipStack.newSession(s_type, oConfigCall);
      // make call
      if (oSipSessionCall.call(txtPhoneNumber.value) != 0) {
        oSipSessionCall = null;
        txtCallStatus.value = 'Çağrı Başarısız';
        txtCallStatusOut.value = 'Çağrı Başarısız';

        callStatus = "Yanıt Yok";

        btnAra.disabled = false;
        btnHangUp.disabled = true;
        return;
      }
      saveCallOptions();
    } else if (oSipSessionCall) {
      txtCallStatus.value = 'Bağlanıyor dış arama';
      txtCallStatusOut.value = 'Bağlanıyor dışarama';
      oSipSessionCall.accept(oConfigCall);
      callStatus = "Tamamlandı";
    }
  }

  // makes a call (SIP INVITE)
  function sipCall(s_type) {

    profileTab.hidden = true;
    $('#profileTab').css('display', 'none');
    if (incallNumber == "9341001") {
    } else {
      $.ajax({
        type: 'GET',
        url: '/api/inbound-call-pauser',
        headers: {
          'Authorization': "Bearer " + getTokenStorage(),
          'accept': "application/json",
          'Content-Type': "application/json",
        },
        success: function (data) {
          console.log(data);
        }
      });
    }

    stopTimerOwn();
    var rehberNumara = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
    rehberKayitBul(rehberNumara);
    callType = "inBound";
    activeCall = true;
    // alert(callType);

    txtCallStatus.value = 'Bağlanıyor gelen';
    txtCallStatusOut.value = 'Bağlanıyor gelen';

    if (tbxDebug == true) console.log("gelen cagrı");
    if (tbxDebug == true) console.log(oConfigCall);


    oSipSessionCall.accept(oConfigCall);
    startTimer();

  }

  // transfers the call
  function sipTransfer() {
    var s_prefix = '9341001';
    s_destination = prompt('Transfer Edilecek Dahili', '');

    if (s_destination.length <= 3) {
      var aaa = "*2" + s_prefix + s_destination;
      var bbb = aaa.split("");
      // console.log(bbb);

      $.each(bbb, function () {
        // console.log(this);
        oSipSessionCall.dtmf(this);
      });

    } else {
      var aaa = "*2" + s_destination;
      var bbb = aaa.split("");
      if (tbxDebug == true) console.log(bbb);
      $.each(bbb, function () {
        // console.log(this);
        oSipSessionCall.dtmf(this);
      });
    }



  $('#ivrMenu').on('select2:select', function (e) {
    var id = e.params.data.id;
    var text = e.params.data.text;

    IVRTransfer(id);
  });

  $('#ivrMenuOutbound').on('select2:select', function (e) {
    var id = e.params.data.id;
    var text = e.params.data.text;

    IVRTransfer(id);
  });

  function IVRTransfer(ivrNumber) {
    if (ivrNumber == "IvrTransferSec") {
      alert("Lütfen bir IVR menü seçiniz..")
    } else {
      ivrcon = ivrNumber.length;
      if (ivrcon == 1) {
        ivrNumber = 800 + ivrNumber;
      }
      if (ivrcon == 2) {
        ivrNumber = 80 + ivrNumber;
      }

      if (oSipSessionCall) {
        // var s_destination = prompt('Enter destination number', '');
        if (!tsk_string_is_null_or_empty(ivrNumber)) {
          // btnTransfer.disabled = true;
          if (oSipSessionCall.transfer(ivrNumber) != 0) {
            txtCallStatus.value = 'Transfer Başarısız';
            txtCallStatusOut.value = 'Transfer Başarısız';
            // btnTransfer.disabled = false;
            return;
          }
          txtCallStatus.value = '<i>Çağrı Transfer Ediliyor...</i>';
          txtCallStatusOut.value = '<i>Çağrı Transfer Ediliyor...</i>';
        }
      }
      ivrListesiCek();
    }
  }

  // holds or resumes the call
  function sipToggleHoldResume() {
    if (oSipSessionCall) {
      var i_ret;
      var pauser;
      btnHoldResume.disabled = false;
      txtCallStatus.value = oSipSessionCall.bHeld ? '<i>Çağrıya Devam Ediliyor</i>' : '<i>Cağrı Bekletiliyor...</i>';
      txtCallStatusOut.value = oSipSessionCall.bHeld ? '<i>Çağrıya Devam Ediliyor</i>' : '<i>Cağrı Bekletiliyor...</i>';
      pauser = oSipSessionCall.bHeld ? oSipSessionCall.bHeld = false : oSipSessionCall.bHeld = true;
      if (tbxDebug == true) console.log(pauser);
      if (pauser == true) {
        oSipSessionCall.hold();
        if (callType == "inBound") {
          $("#btnHoldResume").removeClass("btn-warning");
          $("#btnHoldResume").addClass("btn-danger");
          $("#btnSoru").css("display", "block");
          btnSoru.disabled = false;
          holdLogStart(callID, callType);
          stopTimerOwn();
          startTimer();
        } else {
          if (callType == "outBound") {
            $("#outBoundHoldBtn").removeClass("btn-warning");
            $("#outBoundHoldBtn").addClass("btn-danger");
            $("#btnSoru").css("display", "block");
            btnSoru.disabled = false;
            holdLogStart(callID, callType);
            outboundStopTimerOwn();
            outBoundStartTimer();
          }
        }
      } else {
        if (pauser == false) {
          oSipSessionCall.resume();
          if (callType == "inBound") {
            $("#btnHoldResume").removeClass("btn-danger");
            $("#btnHoldResume").addClass("btn-warning");
            $("#btnSoru").css("display", "none");
            btnSoru.disabled = true;
            callQuestion = 0;
            holdLogStop(callID, callType);
            stopTimerOwn();
            startTimer();
          } else {
            if (callType == "outBound") {
              $("#outBoundHoldBtn").removeClass("btn-danger");
              $("#outBoundHoldBtn").addClass("btn-warning");
              $("#btnSoru").css("display", "none");
              btnSoru.disabled = true;
              callQuestion = 0;
              holdLogStop(callID, callType);
              outboundStopTimerOwn();
              outBoundStartTimer();
            }
          }
        }
      }
    }
  }

  // Mute or Unmute the call
  function sipToggleMute() {

    if (oSipSessionCall) {

      if (tbxDebug == true) console.log("toggle mute da");

      var i_ret;
      var bMute = !oSipSessionCall.bMute;
      txtCallStatus.value = bMute ? 'Çağrı Sessize Alındı' : 'Çağrı Sessizden çıkarıldı';
      txtCallStatusOut.value = bMute ? 'Çağrı Sessize Alındı' : 'Çağrı Sessizden çıkarıldı';

      btnMute.value = bMute ? "Sesi Aç" : "Sessize Al";

      i_ret = oSipSessionCall.mute('audio'/*could be 'video'*/, bMute);
      if (i_ret != 0) {
        txtCallStatus.value = 'Sessize alma Hatası';
        txtCallStatusOut.value = 'Sessize alma Hatası';
        return;
      }
      oSipSessionCall.bMute = bMute;
      if (bMute == 1) {
        if (callType == "inBound") {
          $("#btnMute").removeClass("btn-warning");
          $("#btnMute").addClass("btn-danger");
        } else {
          if (callType == "outBound") {
            $("#outBoundMuteBtn").removeClass("btn-warning");
            $("#outBoundMuteBtn").addClass("btn-danger");
          }
        }
      } else {
        if (bMute == 0) {
          if (callType == "inBound") {
            $("#btnMute").removeClass("btn-danger");
            $("#btnMute").addClass("btn-warning");
          } else {
            if (callType == "outBound") {
              $("#outBoundMuteBtn").removeClass("btn-danger");
              $("#outBoundMuteBtn").addClass("btn-warning");
            }
          }
        }
      }
    }
  }

  // terminates the call (SIP BYE or CANCEL)
  function sipHangUp() {
    if (callQuestion == 1) {
      alert("Lütfen Bekletmeden Çıkınız");
    } else {
      if (oSipSessionCall) {

        oSipSessionCall.hangup({events_listener: {events: '*', listener: onSipEventSession}});

        txtCallStatus.value = 'Çağrı Kapatıldı';
        txtCallStatusOut.value = 'Çağrı Kapatıldı';
        toBeSentData.body.Status = "Temsilci Tarafından Kapatıldı";


        // var completeTime = moment().format('M/D/Y H:mm:ss');


        // toBeSentData.body.PlannedCompletion = completeTime.toLocaleString();


        //stopTimerOwn();
        callFlashingStop();

        //console.log("kapata basıldı");
      }
    }
  }


  function sipHangUpOutbound() {
    if (oSipSessionCall) {
      oSipSessionCall.hangup({events_listener: {events: '*', listener: onSipEventSession}});

      txtCallStatus.value = 'Çağrı Kapatıldı';
      txtCallStatusOut.value = 'Çağrı Kapatıldı';


      var completeTime = moment().format('M/D/Y H:mm:ss');


      toBeSentData.body.PlannedCompletion = completeTime.toLocaleString();

      outboundStopTimerOwn();
      stopOutbound();
      homeBtn.hidden = false;
      $('#homeBtn').css('display', 'block');

      if (tbxDebug == true) console.log(toBeSentData);
    }
  }

  function sipSendDTMF(c) {
    if (oSipSessionCall && c) {
      if (oSipSessionCall.dtmf(c) == 0) {
        try {
          dtmfTone.play();
        } catch (e) {
        }
      }
    }
  }

  function startRingTone() {
    try {
      ringtone.play();
    } catch (e) {
    }
  }

  function stopRingTone() {
    try {
      ringtone.pause();
    } catch (e) {
    }
  }

  function startRingbackTone() {
    try {
      ringbacktone.play();
    } catch (e) {
    }
  }

  function stopRingbackTone() {
    try {
      ringbacktone.pause();
    } catch (e) {
    }
  }

  function toggleFullScreen() {
    if (videoRemote.webkitSupportsFullscreen) {
      fullScreen(!videoRemote.webkitDisplayingFullscreen);
    } else {
      fullScreen(!bFullScreen);
    }
  }

  function openKeyPad() {
    divKeyPad.style.visibility = 'visible';
    divKeyPad.style.left = document.getElementById("btnKeyPad").clientLeft;
    divKeyPad.style.top = '70px';
    divGlassPanel.style.visibility = 'visible';
  }

  function closeKeyPad() {
    divKeyPad.style.left = '0px';
    divKeyPad.style.top = '0px';
    divKeyPad.style.visibility = 'hidden';
    divGlassPanel.style.visibility = 'hidden';
  }

  function fullScreen(b_fs) {
    bFullScreen = b_fs;
    if (tsk_utils_have_webrtc4native() && bFullScreen && videoRemote.webkitSupportsFullscreen) {
      if (bFullScreen) {
        videoRemote.webkitEnterFullScreen();
      } else {
        videoRemote.webkitExitFullscreen();
      }
    } else {
      if (tsk_utils_have_webrtc4npapi()) {
        try {
          if (window.__o_display_remote) window.__o_display_remote.setFullScreen(b_fs);
        } catch (e) {
          divVideo.setAttribute("class", b_fs ? "full-screen" : "normal-screen");
        }
      } else {
        divVideo.setAttribute("class", b_fs ? "full-screen" : "normal-screen");
      }
    }
  }

  function showNotifICall(s_number) {
    // permission already asked when we registered
    var notification = new Notification('Gelen Çağrı Var', {
      icon: 'tbx.jpeg',
      body: s_number + " Seni Arıyor",
      image: "/assets/images/call-recorder-unlimited.jpg"
    });

    notification.onclick = function () {
      window.focus();
      this.close();
    }

  }

  function onKeyUp(evt) {
    evt = (evt || window.event);
    if (evt.keyCode == 27) {
      fullScreen(false);
    } else if (evt.ctrlKey && evt.shiftKey) { // CTRL + SHIFT
      if (evt.keyCode == 65 || evt.keyCode == 86) { // A (65) or V (86)
        bDisableVideo = (evt.keyCode == 65);
        //txtCallStatus.value = 'Video ' + (bDisableVideo ? 'disabled' : 'enabled') + '</i>';
        window.localStorage.setItem('org.doubango.expert.disable_video', bDisableVideo);
      }
    }
  }

  /*function onDivCallCtrlMouseMove(evt) {
    try { // IE: DOM not ready
      if (tsk_utils_have_stream()) {
        btnCall.disabled = (!tsk_utils_have_stream() || !oSipSessionRegister || !oSipSessionRegister.is_connected());
        document.getElementById("divCallCtrl").onmousemove = null; // unsubscribe
      }
    }
    catch (e) {
    }
  }*/

  function uiOnConnectionEvent(b_connected, b_connecting) { // should be enum: connecting, connected, terminating, terminated
    btnRegister.style.display = b_connected || b_connecting ? 'none' : 'block';
    btnUnRegister.style.display = !b_connected && !b_connecting ? 'none' : 'block';
    //btnAra.disabled = !(b_connected && tsk_utils_have_webrtc() && tsk_utils_have_stream());
    btnHangUp.disabled = !oSipSessionCall;
  }

  function uiVideoDisplayEvent(b_local, b_added) {

  }

  function uiVideoDisplayShowHide(b_show) {
    if (b_show) {
      tdVideo.style.height = '340px';
      divVideo.style.height = navigator.appName == 'Microsoft Internet Explorer' ? '100%' : '340px';
    } else {
      tdVideo.style.height = '0px';
      divVideo.style.height = '0px';
    }
  }

  function uiDisableCallOptions() {
    if (window.localStorage) {
      window.localStorage.setItem('org.doubango.expert.disable_callbtn_options', 'true');
      uiBtnCallSetText('Ara');
      alert('Use expert view to enable the options again (/!\\requires re-loading the page)');
    }
  }

  function uiBtnCallSetText(s_text) {
    switch (s_text) {
      case "Ara": {
        var bDisableCallBtnOptions = (window.localStorage && window.localStorage.getItem('org.doubango.expert.disable_callbtn_options') == "true");
        btnAra.value = bDisableCallBtnOptions ? 'Ara' : 'Ara <span id="spanCaret" class="caret">';
        //btnCall.setAttribute("class", bDisableCallBtnOptions ? "btn btn-primary" : "btn btn-primary dropdown-toggle");
        btnAra.onclick = bDisableCallBtnOptions ? function () {
          sipCall(bDisableVideo ? 'call-audio' : 'call-audiovideo');
        } : null;
        // ulCallOptions.style.visibility = bDisableCallBtnOptions ? "hidden" : "visible";
        // if (!bDisableCallBtnOptions && ulCallOptions.parentNode != divBtnCallGroup) {
        //   divBtnCallGroup.appendChild(ulCallOptions);
        // }
        // else if (bDisableCallBtnOptions && ulCallOptions.parentNode == divBtnCallGroup) {
        //   document.body.appendChild(ulCallOptions);
        // }

        break;
      }
      default: {
        btnAra.value = btnAra.innerHTML = s_text;
        btnAra.setAttribute("class", "btn btn-primary");
        btnAra.onclick = function () {
          sipCall(bDisableVideo ? 'call-audio' : 'call-audiovideo');
        };
        //ulCallOptions.style.visibility = "hidden";
        //if (ulCallOptions.parentNode == divBtnCallGroup) {
        //document.body.appendChild(ulCallOptions);
        //}
        break;
      }
    }
  }

  function uiCallTerminated(s_description) {
    // alert("Kapandı");

    uiBtnCallSetText("Ara");
    btnHangUp.value = 'Kapat';
    btnHoldResume.value = 'Beklet';
    btnMute.value = "Sessiz";
    btnAra.disabled = false;
    btnHangUp.disabled = true;
    btnHoldResume.disabled = true;
    btnMute.disabled = true;
    btnTransfer.disabled = true;
    ivrMenu.disabled = true;
    ivrMenuOutbound.disabled = true;
    molaBtn.disabled = false;
    islevlerBtn.disabled = false;
    txtPhoneNumber.disabled = false;
    outBoundHangUpBtn.disabled = true;
    outBoundHoldBtn.disabled = true;
    outBoundMuteBtn.disabled = true;
    btnSendSurvey.disabled = true;
    labelRinging.innerHTML = "";
    if (window.btnBFCP) window.btnBFCP.disabled = true;

    var completeTime = moment().format('M/D/Y H:mm:ss');
    toBeSentData.body.PlannedCompletion = completeTime.toLocaleString();

    ///cağrı suresini durdurrrrrr
    stopTimerOwn();
    callFlashingStop();
    if (callType == "outBound") {
      console.log("outbound Girdim");
      toBeSentData.body.Status = callStatus;
      activeCall = false;

      if (callQuestion == 1) {
        homeBtn.hidden = false;
        $('#homeBtn').css('display', 'block');
        callQuestionSave();
      } else {
        if (molaDisArama == 1) {
          console.log("outbound ACW Girmedim");
          homeBtn.hidden = false;
          $('#homeBtn').css('display', 'block');
          outBoundHangUpBtn.disabled = true;
          outBoundHoldBtn.disabled = true;
          outBoundMuteBtn.disabled = true;
          $("#outBoundMuteBtn").removeClass("btn-danger");
          $("#outBoundMuteBtn").addClass("btn-warning");
          $("#outBoundHoldBtn").removeClass("btn-danger");
          $("#outBoundHoldBtn").addClass("btn-warning");
          callType = "";
        } else {
          console.log("outbound ACW Girdim");
          acwOutBound(20, 0); //20 sn saydır agenti pause yap
          homeBtn.hidden = false;
          $('#homeBtn').css('display', 'block');
          outBoundHangUpBtn.disabled = true;
          outBoundHoldBtn.disabled = true;
          outBoundMuteBtn.disabled = true;
          $("#outBoundMuteBtn").removeClass("btn-danger");
          $("#outBoundMuteBtn").addClass("btn-warning");
          $("#outBoundHoldBtn").removeClass("btn-danger");
          $("#outBoundHoldBtn").addClass("btn-warning");
          stopInterval();
          callType = "";
        }
      }
    }

    if (incallNumber == "9341001") {
    } else {
      createActivity(toBeSentData);
    }

    if (callType == "inBound") {
      profileTab.hidden = false;
      $('#profileTab').css('display', 'block');
      activeCall = false;
      if (callQuestion == 1) {
        callQuestionSave();
      } else {
        if (incallNumber == "9341001") {
        } else {
          acw(20, 0); //20 sn saydır agenti pause yap
          $("#btnMute").removeClass("btn-danger");
          $("#btnMute").addClass("btn-warning");
          $("#btnHoldResume").removeClass("btn-danger");
          $("#btnHoldResume").addClass("btn-warning");
          stopInterval();
          callType = "";
        }
      }
    }

    getlastCalls();

    clearIvrValue();
    oSipSessionCall = null;

    stopRingbackTone();
    stopRingTone();

    txtCallStatus.value = "" + s_description + "";
    txtCallStatusOut.value.value = "" + s_description + "";
    uiVideoDisplayShowHide(false);
    divCallOptions.style.opacity = 0;

    if (oNotifICall) {
      oNotifICall.cancel();
      oNotifICall = null;
    }

    uiVideoDisplayEvent(false, false);
    uiVideoDisplayEvent(true, false);

    setTimeout(function () {
      if (!oSipSessionCall) txtCallStatus.value = '';
    }, 2500);


  }

  //yorum
  // Callback function for SIP Stacks
  function onSipEventStack(e /*SIPml.Stack.Event*/) {

    tsk_utils_log_info('==stack event = ' + e.type);
    if (tbxDebug == true) console.log(e)
    switch (e.type) {
      case 'started': {

        // catch exception for IE (DOM not ready)
        try {
          // LogIn (REGISTER) as soon as the stack finish starting
          oSipSessionRegister = this.newSession('register', {
            expires: 200,
            events_listener: {events: '*', listener: onSipEventSession},
            sip_caps: [
              {name: '+g.oma.sip-im', value: null},
              //{ name: '+sip.ice' }, // rfc5768: FIXME doesn't work with Polycom TelePresence
              {name: '+audio', value: null},
              {name: 'language', value: '\"en,fr\"'}
            ]
          });
          oSipSessionRegister.register();
        } catch (e) {
          txtRegStatus.value = txtRegStatus.value = "1:" + e + "";
          btnRegister.disabled = false;
        }

        callStatus = "Çağrı Başladı";
        break;
      }
      case 'st' : {

        if (tbxDebug == true) console.log('st**');
        getApiDataFromHeader(e.o_event.o_message.ao_headers);
        callStatus = "Çalıyor";
        labelRinging.innerHTML = "Çalıyor";
        break;


      }
      case 'stopping':
      case 'stopped':
      case 'failed_to_start':
      case 'failed_to_stop': {
        var bFailure = (e.type == 'failed_to_start') || (e.type == 'failed_to_stop');
        oSipStack = null;
        oSipSessionRegister = null;

        oSipSessionCall = null;

        uiOnConnectionEvent(false, false);

        stopRingbackTone();
        stopRingTone();

        uiVideoDisplayShowHide(false);
        divCallOptions.style.opacity = 0;

        txtCallStatus.value = '';
        txtCallStatusOut.value = '';
        txtRegStatus.value = bFailure ? "Bağlantı Kesildi: " + e.description + "" : "Bağlantı Kesildi";
        callStatus = "Bağlantı Kesildi";
        break;
      }

      case 'i_new_call': {


        if (!oSipSessionCall) {
          oSipSessionCall = e.newSession;
          // start listening for events
          oSipSessionCall.setConfiguration(oConfigCall);

          if (tbxDebug == true) console.log(oSipSessionCall);

          //uiBtnCallSetText('Answer');
          //btnHangUp.value = 'Reject';
          //btnCall.disabled = false;
          //btnHangUp.disabled = false;

          startRingTone();

          var sRemoteNumber = (oSipSessionCall.getRemoteFriendlyName() || 'unknown');
          igdasTelefonNo = String(sRemoteNumber);
          //  var sRemoteName = (SIPml.Event.prototype.getContentString()|| 'unknown');

          getApiDataFromHeader(e.o_event.o_message.ao_headers);
          txtCallStatus.value = "Gelen Çağrı *" + sRemoteNumber + "";
          $("#txtInboundNumber").html("Gelen Çağrı * " + sRemoteNumber + "");
          txtInboundNumber.html = "Gelen Çağrı * " + sRemoteNumber + "";

          incallNumber = sRemoteNumber;
          incallNumber = incallNumber.substr(0, 7);

          callFlashingStart();
          callStatus = "Tamamlandı";

          if (incallNumber == "9341001") {
          } else {
            siebelCreateSR("9" + sRemoteNumber, callID);
          }
          showNotifICall(sRemoteNumber);
          // rehberKayitBul(sRemoteNumber);

          setTimeout(function () {
            sipCall('call-audio');
            clearInterval(callFlashing);
            $("#myTabContent").css("background-color", "white");
          }, 3000);


          var startDate = moment().format('M/D/Y H:mm:ss');

          var ivrChoiceList = [];
          var dataIvrChoice = null;


          // 2. setter fonksiyon, ajax gelen datayı işliyor.
          function setIvrChoiceList(obj) {
            $(obj).each(function (index, val) {
              if (index === 0) {
                ivrChoiceList["dt"] = val.dt;
              }
              if (tbxDebug == true) console.log(val.dt, val.choice);
              ivrChoiceList[index] = val.choice;
            });

            var result = {};
            result["ch"] = ivrChoiceList.join();
            result["dt"] = ivrChoiceList["dt"];

            // dışarıda kullanmak gerekirse dataIvrChoice
            dataIvrChoice = result;

            if (tbxDebug == true) console.log("%cData setter: " + JSON.stringify(result), "background: white; color: blue; font-size: large");
            if (tbxDebug == true) console.log(dataIvrChoice);
            toBeSentData = {
              "body": {
                "Description": "+9" + sRemoteNumber + " - Gelen Çağrı",
                "Planned": startDate,
                "PlannedCompletion": "",
                "Started": startDate,
                "UserName": siebelUsername,
                "Type": "Çağrı - Gelen",
                "Status": "Tamamlandı",
                "CallId": callID,
                "SurveyFlg": surveyFlag,
                "IVRKeys": dataIvrChoice["ch"]
              }
            };


            if (tbxDebug == true) console.log(toBeSentData);
            // işlem için buradan devam,


          }

          if (tbxDebug == true) console.log("%ctoBeSentData: " + JSON.stringify(toBeSentData.body), "background: white; color: red; font-size: large");

          // 1. ajax request return yok, üst setter fonksiyona atıyor.
          $.ajax({
            type: 'GET',
            url: '/api/ivr_logs?callId=' + xcallID + '',
            headers: {
              'Authorization': "Bearer " + window.localStorage.getItem('token'),
              'accept': "application/json",
              'Content-Type': "application/json",
            }
          })
            .done(function (response) {
              // set the response data in to global variable(dataIvrChoice)
              obj = JSON.parse(JSON.stringify(response));
              setIvrChoiceList(obj);

            });

          (sRemoteNumber);

        } else {
          // do not accept the incoming call if we're already 'in call'
          stopRingbackTone();
          stopRingTone();

          e.newSession.hangup(); // comment this line for multi-line support

        }
        break;
      }

      case 'm_permission_requested': {
        divGlassPanel.style.visibility = 'visible';
        callStatus = "Çağrı Tamamlanamadı";
        break;
      }
      case 'm_permission_accepted':
      case 'm_permission_refused': {
        divGlassPanel.style.visibility = 'hidden';
        if (e.type == 'm_permission_refused') {
          uiCallTerminated('Mikrofona izin verilmedi');
        }
        callStatus = "Çağrı Tamamlanamadı";
        break;
      }

      case 'starting':
      default:
        break;
    }
  };

  function getApiDataFromHeader(headers) {
    $("#surveyFlag").html("");
    if (tbxDebug == true) console.log(headers);

    $.each(headers, function (key, header) {

      if (header.s_name == 'X-CALLID') {
        xcallID = header.s_value;
        //getIvrRoute(callID);
        //////////////  bi ara buda symfony ye gonderilecek

        getIvrRoute(xcallID);


        //console.log('CallID ile bilgileri çek CallID'+header.s_value)
      } else if (header.s_name == 'X-UID') {
        callID = header.s_value;
        // console.log("Anket Katılımı Olmayacak CallID"+callID);

      } else if (header.s_name == 'X-NODEST') {
        queNumber = header.s_value;

      } else if (header.s_name == 'X-POLL') {
        if (header.s_value == "1") {
          surveyFlag = "Y";
          $("#surveyFlag").html("Ankete Katılacak");
          inboubdAnketCallIdValue = 1;
        }

      } else if (header.s_name == 'Call-ID') {
        CallOrigCallID = header.s_value;


      } else if (header.s_name == 'X-IGDAS-TDCID') {
        igdasTDCID = String(header.s_value);
        if (tbxDebug == true) console.log("TDC ID:" + igdasTDCID);


      } else if (header.s_name == 'X-IGDAS-TALEPTIPI') {
        igdasTalepTipi = String(header.s_value).replace(/\"/g, '');
        if (tbxDebug == true) console.log("TALEPTİPİ:" + igdasTalepTipi);


      } else if (header.s_name == 'X-IGDAS-DURUMKODU') {
        igdasIVRDurumKodu = header.s_value;
        if (tbxDebug == true) console.log("DURUM KODU:" + igdasIVRDurumKodu);


      }
    });

    igdasCallID = String(callID);
  }

  function sendSurvey() {
    if (tbxDebug == true) console.log(toBeSentData.body.CallId);
    $.ajax({
      type: 'GET',
      url: '/softphone/getChannelId/' + toBeSentData.body.CallId,
      success: function (data) {
        obj = JSON.parse(JSON.stringify(data));
        var channelID = obj.channelId;
        outboundStopTimerOwn();
        stopOutbound();
        homeBtn.hidden = false;
        $('#homeBtn').css('display', 'block');
        $.getJSON("https://" + tbxSipServer + "/api/poll_ob.php?user=amiuser&pass=amiuser&chan=" + channelID);
      }
    });


  }


  // Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
  function onSipEventSession(e /* SIPml.Session.Event */) {
    tsk_utils_log_info('==session event = ' + e.type);

    switch (e.type) {
      case 'connecting':
      case 'connected': {
        var bConnected = (e.type == 'connected');
        if (e.session == oSipSessionRegister) {
          uiOnConnectionEvent(bConnected, !bConnected);
          txtRegStatus.value = "" + e.description + "";
        } else if (e.session == oSipSessionCall) {
          btnHangUp.value = 'Kapat';
          btnAra.disabled = true;
          btnHangUp.disabled = false;
          btnHoldResume.disabled = false;
          btnMute.disabled = false;
          btnTransfer.disabled = false;
          ivrMenu.disabled = false;
          molaBtn.disabled = true;
          islevlerBtn.disabled = true;
          // pauseAgentOnQue();
          if (window.btnBFCP) window.btnBFCP.disabled = false;

          if (bConnected == true) {
            stopRingbackTone();
            stopRingTone();
            ///çağrı süresini saydır

            if (callType == "outBound") {
              callStatus = "Tamamlandı";
              labelRinging.innerHTML = "";
              outboundStopTimerOwn();
              outBoundStartTimer();
            }
            if (oNotifICall) {
              oNotifICall.cancel();
              oNotifICall = null;
            }
          }

          txtCallStatus.value = "" + e.description + "";
          txtCallStatusOut.value = "" + e.description + "";
          divCallOptions.style.opacity = bConnected ? 1 : 0;
          callStatus = "Tamamlandı";

          if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback
            uiVideoDisplayEvent(false, true);
            uiVideoDisplayEvent(true, true);
          }
        }
        break;
      } // 'connecting' | 'connected'
      case 'terminating':
      case 'terminated': {
        // labelRinging.innerHTML="";
        if (e.session == oSipSessionRegister) {
          uiOnConnectionEvent(false, false);

          oSipSessionCall = null;
          oSipSessionRegister = null;

          txtRegStatus.value = "" + e.description + "";
        } else if (e.session == oSipSessionCall) {
          uiCallTerminated(e.description);
        }
        break;
      } // 'terminating' | 'terminated'

      case 'm_stream_video_local_added': {
        if (e.session == oSipSessionCall) {
          uiVideoDisplayEvent(true, true);
        }
        break;
      }
      case 'm_stream_video_local_removed': {
        if (e.session == oSipSessionCall) {
          uiVideoDisplayEvent(true, false);
        }
        break;
      }
      case 'm_stream_video_remote_added': {
        if (e.session == oSipSessionCall) {
          uiVideoDisplayEvent(false, true);
        }
        break;
      }
      case 'm_stream_video_remote_removed': {
        if (e.session == oSipSessionCall) {
          uiVideoDisplayEvent(false, false);
        }
        break;
      }

      case 'm_stream_audio_local_added':
      case 'm_stream_audio_local_removed':
      case 'm_stream_audio_remote_added':
      case 'm_stream_audio_remote_removed': {
        break;
      }

      case 'i_ect_new_call': {
        oSipSessionTransferCall = e.session;
        break;
      }

      case 'i_ao_request': {
        if (e.session == oSipSessionCall) {
          var iSipResponseCode = e.getSipResponseCode();
          if (iSipResponseCode == 180 || iSipResponseCode == 183) {

            // burada kaldım
            toBeSentData.body.CallId = e.o_event.o_message.o_hdr_Call_ID.s_value;

            if (tbxDebug == true) console.log("osip = " + e.o_event.o_message);

            if (isOutBoundFree == true) {
              if (incallNumber == "9341001") {
              } else {
                siebelCreateSR(number, e.o_event.o_message.o_hdr_Call_ID.s_value);
              }
              isOutBoundFree = false;
              number = "";
            }

            startRingbackTone();
            txtCallStatus.value = 'Çalıyor...';
            txtCallStatusOut.value = 'Çalıyor...';

            labelRinging.innerHTML = "Çalıyor";
            if (callType == "outBound") {
              callStatus = "Yanıt Yok";
            }
          }
        }

        break;
      }

      case 'm_early_media': {
        if (e.session == oSipSessionCall) {
          stopRingbackTone();
          stopRingTone();
          txtCallStatus.value = 'Medya Aktif';
          txtCallStatusOut.value = 'Medya Aktif';
        }
        break;
      }

      case 'm_local_hold_ok': {
        if (e.session == oSipSessionCall) {
          if (oSipSessionCall.bTransfering) {
            oSipSessionCall.bTransfering = false;
            // this.AVSession.TransferCall(this.transferUri);
          }
          btnHoldResume.value = 'Geri Al';
          btnHoldResume.disabled = false;
          txtCallStatus.value = 'Bekletiliyor';
          txtCallStatusOut.value = 'Bekletiliyor';
          oSipSessionCall.bHeld = true;
        }
        break;
      }
      case 'm_local_hold_nok': {
        if (e.session == oSipSessionCall) {
          oSipSessionCall.bTransfering = false;
          btnHoldResume.value = 'Beklet';
          btnHoldResume.disabled = false;
          txtCallStatus.value = 'hata';
          txtCallStatusOut.value = 'hata';
        }
        break;
      }
      case 'm_local_resume_ok': {
        if (e.session == oSipSessionCall) {
          oSipSessionCall.bTransfering = false;
          btnHoldResume.value = 'Beklet';
          btnHoldResume.disabled = false;
          txtCallStatus.value = 'Bekletiliyor';
          txtCallStatusOut.value = 'Bekletiliyor';
          oSipSessionCall.bHeld = false;

          if (SIPml.isWebRtc4AllSupported()) { // IE don't provide stream callback yet
            uiVideoDisplayEvent(false, true);
            uiVideoDisplayEvent(true, true);
          }
        }
        break;
      }
      case 'm_local_resume_nok': {
        if (e.session == oSipSessionCall) {
          oSipSessionCall.bTransfering = false;
          btnHoldResume.disabled = false;
          txtCallStatus.value = 'Hata';
          txtCallStatusOut.value = 'Hata';
        }
        break;
      }
      case 'm_remote_hold': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = '';
          txtCallStatusOut.value = '';
        }
        break;
      }
      case 'm_remote_resume': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = '';
          txtCallStatusOut.value = '';
        }
        break;
      }
      case 'm_bfcp_info': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = '' + e.description + '';
          txtCallStatusOut.value = '' + e.description + '';
        }
        break;
      }

      case 'o_ect_trying': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = 'Çağrı Yönlendiriliyor';
          txtCallStatusOut.value = 'Çağrı Yönlendiriliyor';
        }
        break;
      }
      case 'o_ect_accepted': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = 'Çağrı Yönlendirme Başarılı';
          txtCallStatusOut.value = 'Çağrı Yönlendirme Başarılı';
        }
        break;
      }
      case 'o_ect_completed':
      case 'i_ect_completed': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = 'Çağrı Yönlendirme Başarılı';
          txtCallStatusOut.value = 'Çağrı Yönlendirme Başarılı';
          btnTransfer.disabled = false;
          if (oSipSessionTransferCall) {
            oSipSessionCall = oSipSessionTransferCall;
          }
          oSipSessionTransferCall = null;
        }
        break;
      }
      case 'o_ect_failed':
      case 'i_ect_failed': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = 'Çağrı Yönlendirme Başarısız';
          txtCallStatusOut.value = 'Çağrı Yönlendirme Başarısız';
          btnTransfer.disabled = false;
        }
        break;
      }
      case 'o_ect_notify':
      case 'i_ect_notify': {
        if (e.session == oSipSessionCall) {
          txtCallStatus.value = "Çağrı Aktarma:" + e.getSipResponseCode() + " " + e.description + "";
          txtCallStatusOut.value = "Çağrı Aktarma:" + e.getSipResponseCode() + " " + e.description + "";
          if (e.getSipResponseCode() >= 300) {
            if (oSipSessionCall.bHeld) {
              oSipSessionCall.resume();
            }
            btnTransfer.disabled = false;
          }
        }
        break;
      }
      case 'i_ect_requested': {
        if (e.session == oSipSessionCall) {
          var s_message = "Çağrı şuraya yönlenecek" + e.getTransferDestinationFriendlyName() + "]?";//FIXME
          if (confirm(s_message)) {
            txtCallStatus.value = "Çağrı Aktarılıyor...";
            txtCallStatusOut.value = "Çağrı Aktarılıyor...";
            oSipSessionCall.acceptTransfer();
            break;
          }
          oSipSessionCall.rejectTransfer();
        }
        break;
      }
    }
  }

</script>


<script>
  Date.prototype.toDateInputValue = (function () {
    var local = new Date(this);
    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
    return local.toJSON().slice(0, 10);
  });

  $('#date').val(new Date().toDateInputValue());


  $(function () {
    var d = new Date(),
      h = d.getHours(),
      m = d.getMinutes();
    if (h < 10) h = '0' + h;
    if (m < 10) m = '0' + m;
    $('input[type="time"][value="now"]').each(function () {
      $(this).attr({'value': h + ':' + m});
    });
  });
</script>

<script>
  function getCurrentDateTimeMySql() {
    var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
    var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, 19).replace('T', ' ');
    var mySqlDT = localISOTime;
    return mySqlDT;
  }
</script>




<script src="/assets/softphoneAsset/js/select2.min.js"></script>
<script>


  // $(document).ready(function() {
  // $('.js-example-basic-single').select2();
  $('#outBoundCallButton').click(function () {
    outBoundFree();
    disableAcw();
  });
  $("#outBoundSelect").change(function () {
    txtPhoneNumber.disabled = true;
    siebelFeedbackCall($(this).val());
  });
  // });
</script>


<script type="text/javascript">
  jQuery(function () {
    jQuery(window).bind('beforeunload', function () {
      return 'Sayfadan ayrılmak istediğinizden eminmisiniz..';
    });

    // jQuery(window).bind('unload', function () {
    //     $.get('');
    //     return 'Sayfadan ayrılmak istediğinizden eminmisiniz..';
    // });
  });
</script>

<script type="text/javascript">
  function startInterval() {
    stopInterval();
    setTimeout(function () {
      molaVeAcwKontrol = setInterval(function () {
        molaKontrol();
        $("#dahiliNo").html(dahiliNo.substr(dahiliNo.length - 3));
        lastRegister();
        // addUpdateRemove();
      }, 10000);
    }, 5000);
  }

  startInterval();

  function stopInterval() {
    clearInterval(molaVeAcwKontrol);
  }
</script>

<script type="text/javascript">
  $("#numPadInbound").keyup(function (event) {
    if (tbxDebug == true) console.log(event.key);
    oSipSessionCall.dtmf(event.key);
  });
</script>

<script type="text/javascript">
  $("#numPadOutbound").keyup(function () {
    if (tbxDebug == true) console.log(event.key);
    oSipSessionCall.dtmf(event.key);
  });
</script>
{% endblock %}